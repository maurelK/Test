// middleware/auth.js - Middleware d'authentification et d'autorisation
const config = require('../config');
const { sendAuthError, sendForbiddenError } = require('../utils/response');

/**
 * Middleware d'authentification JWT
 * V√©rifie le token et r√©cup√®re les informations utilisateur
 */
const authenticateToken = async (req, res, next) => {
    try {
        // Extraire le token de l'header Authorization
        const token = config.jwt.extractTokenFromHeader(req);
        
        if (!token) {
            return sendAuthError(res, 'Token d\'acc√®s requis');
        }
        
        // V√©rifier et d√©coder le token
        const decoded = config.jwt.verifyToken(token);
        
        // V√©rifier que ce n'est pas un refresh token
        if (decoded.type === 'refresh') {
            return sendAuthError(res, 'Token de type invalide');
        }
        
        // R√©cup√©rer les informations utilisateur compl√®tes depuis la base
        const userQuery = `
            SELECT u.*, r.name as role_name, r.permissions, o.name as organization_name
            FROM users u
            LEFT JOIN roles r ON u.role_id = r.id
            LEFT JOIN organizations o ON u.organization_id = o.id
            WHERE u.id = $1 AND u.is_active = true
        `;
        
        const userResult = await config.database.query(userQuery, [decoded.userId], 'auth-middleware');
        
        if (userResult.rows.length === 0) {
            return sendAuthError(res, 'Utilisateur non trouv√© ou inactif');
        }
        
        const user = userResult.rows[0];
        
        // V√©rifier si le token va bient√¥t expirer (dans les 30 prochaines minutes)
        const isExpiringSoon = config.jwt.isTokenExpiringSoon(decoded, 30);
        
        // Ajouter les informations utilisateur √† la requ√™te
        req.user = user;
        req.token = {
            payload: decoded,
            raw: token,
            isExpiringSoon
        };
        
        // Logger l'acc√®s authentifi√©
        console.log(`üîê Acc√®s authentifi√©: ${user.employee_id} (${user.role_name}) - ${req.method} ${req.path}`);
        
        next();
        
    } catch (error) {
        console.error('‚ùå Erreur d\'authentification:', error.message);
        
        // G√©rer les diff√©rents types d'erreurs JWT
        if (error.message === 'Token expir√©') {
            return sendAuthError(res, 'Token expir√©, veuillez vous reconnecter');
        } else if (error.message === 'Token invalide') {
            return sendAuthError(res, 'Token invalide');
        }
        
        return sendAuthError(res, 'Erreur d\'authentification');
    }
};

/**
 * Middleware d'autorisation par r√¥les
 * @param {...string} allowedRoles - R√¥les autoris√©s
 */
const authorizeRoles = (...allowedRoles) => {
    return (req, res, next) => {
        // V√©rifier que l'utilisateur est authentifi√©
        if (!req.user) {
            return sendAuthError(res, 'Authentification requise');
        }
        
        // V√©rifier le r√¥le
        if (!allowedRoles.includes(req.user.role_name)) {
            console.warn(`üö´ Acc√®s refus√©: ${req.user.employee_id} (${req.user.role_name}) tentative d'acc√®s √† ${req.path}`);
            return sendForbiddenError(res, `Acc√®s r√©serv√© aux r√¥les: ${allowedRoles.join(', ')}`);
        }
        
        console.log(`‚úÖ Autorisation accord√©e: ${req.user.employee_id} (${req.user.role_name})`);
        next();
    };
};

/**
 * Middleware d'autorisation par permissions sp√©cifiques
 * @param {...string} requiredPermissions - Permissions requises
 */
const authorizePermissions = (...requiredPermissions) => {
    return (req, res, next) => {
        if (!req.user) {
            return sendAuthError(res, 'Authentification requise');
        }
        
        const userPermissions = req.user.permissions || {};
        
        // V√©rifier chaque permission requise
        const hasAllPermissions = requiredPermissions.every(permission => {
            // Support de permissions hi√©rarchiques (ex: "users.create", "users.*", "*")
            if (userPermissions['*'] || userPermissions[permission]) {
                return true;
            }
            
            // V√©rifier les permissions wildcard (ex: "users.*" pour "users.create")
            const permissionParts = permission.split('.');
            if (permissionParts.length > 1) {
                const wildcardPermission = permissionParts[0] + '.*';
                return userPermissions[wildcardPermission];
            }
            
            return false;
        });
        
        if (!hasAllPermissions) {
            console.warn(`üö´ Permissions insuffisantes: ${req.user.employee_id} - Requis: ${requiredPermissions.join(', ')}`);
            return sendForbiddenError(res, 'Permissions insuffisantes');
        }
        
        next();
    };
};

/**
 * Middleware d'autorisation pour sa propre organisation seulement
 */
const authorizeOwnOrganization = (req, res, next) => {
    if (!req.user) {
        return sendAuthError(res, 'Authentification requise');
    }
    
    // Ajouter l'ID de l'organisation de l'utilisateur pour filtrer les donn√©es
    req.userOrganizationId = req.user.organization_id;
    
    next();
};

/**
 * Middleware optionnel - authentifie si token pr√©sent mais n'√©choue pas si absent
 */
const authenticateOptional = async (req, res, next) => {
    try {
        const token = config.jwt.extractTokenFromHeader(req);
        
        if (token) {
            // Si token pr√©sent, essayer de l'authentifier
            await authenticateToken(req, res, next);
        } else {
            // Si pas de token, continuer sans authentification
            next();
        }
    } catch (error) {
        // Si erreur d'authentification, continuer sans authentification
        console.warn('‚ö†Ô∏è Authentification optionnelle √©chou√©e:', error.message);
        next();
    }
};

/**
 * Middleware pour v√©rifier si l'utilisateur peut acc√©der √† une ressource sp√©cifique
 * @param {string} resourceType - Type de ressource (ex: 'beneficiary', 'distribution')
 * @param {string} resourceIdParam - Nom du param√®tre contenant l'ID de la ressource
 */
const authorizeResourceAccess = (resourceType, resourceIdParam = 'id') => {
    return async (req, res, next) => {
        try {
            if (!req.user) {
                return sendAuthError(res, 'Authentification requise');
            }
            
            const resourceId = req.params[resourceIdParam];
            
            if (!resourceId) {
                return sendForbiddenError(res, 'ID de ressource requis');
            }
            
            // Les admins ont acc√®s √† tout
            if (req.user.role_name === 'admin') {
                return next();
            }
            
            // V√©rifier l'acc√®s selon le type de ressource
            let hasAccess = false;
            
            switch (resourceType) {
                case 'beneficiary':
                    // V√©rifier que le b√©n√©ficiaire appartient √† la m√™me organisation
                    const beneficiaryResult = await config.database.query(
                        'SELECT organization_id FROM beneficiaries WHERE id = $1',
                        [resourceId],
                        'resource-access-check'
                    );
                    
                    hasAccess = beneficiaryResult.rows.length > 0 && 
                               beneficiaryResult.rows[0].organization_id === req.user.organization_id;
                    break;
                    
                case 'distribution':
                    // V√©rifier via la jointure avec les b√©n√©ficiaires
                    const distributionResult = await config.database.query(
                        `SELECT b.organization_id 
                         FROM distributions d 
                         JOIN beneficiaries b ON d.beneficiary_id = b.id 
                         WHERE d.id = $1`,
                        [resourceId],
                        'resource-access-check'
                    );
                    
                    hasAccess = distributionResult.rows.length > 0 && 
                               distributionResult.rows[0].organization_id === req.user.organization_id;
                    break;
                    
                default:
                    console.warn(`‚ö†Ô∏è Type de ressource non g√©r√©: ${resourceType}`);
                    hasAccess = false;
            }
            
            if (!hasAccess) {
                console.warn(`üö´ Acc√®s √† la ressource refus√©: ${req.user.employee_id} - ${resourceType}:${resourceId}`);
                return sendForbiddenError(res, 'Acc√®s √† cette ressource non autoris√©');
            }
            
            next();
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification d\'acc√®s √† la ressource:', error);
            return sendForbiddenError(res, 'Erreur de v√©rification d\'acc√®s');
        }
    };
};

module.exports = {
    authenticateToken,
    authorizeRoles,
    authorizePermissions,
    authorizeOwnOrganization,
    authenticateOptional,
    authorizeResourceAccess
};
